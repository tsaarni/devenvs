apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  ports:
    - name: postgres
      port: 5432
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  serviceName: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgresql
          image: docker.io/postgres:14-alpine
          args:
            - "-c"
            - "log_statement=all"
            - "-c"
            - "log_destination=stderr"
            # uncomment to enable TLS:
            - "-c"
            - "config_file=/configs/postgresql.conf"
          env:
            - name: POSTGRES_USER
              value: "keycloak"
            - name: POSTGRES_PASSWORD
              value: "keycloak"
            - name: POSTGRES_DB
              value: "keycloak"

          ports:
            - name: postgres
              containerPort: 5432

          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: certs
              mountPath: /certs
            - name: configs
              mountPath: /configs

      securityContext:
        fsGroup: 70 # postgres group in Alpine, to allow postgres process to read certs

      volumes:
        - name: certs
          secret:
            secretName: postgres-certs
            optional: true
            defaultMode: 0440
        - name: configs
          configMap:
            name: postgres-config

  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
data:
  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD

    # "local" is for Unix domain socket connections only
    local   all             all                                     trust
    # IPv4 local connections:
    #host    all             all             127.0.0.1/32            trust
    # IPv6 local connections:
    #host    all             all             ::1/128                 trust
    # Allow replication connections from localhost, by a user with the
    # replication privilege.
    #local   replication     all                                     trust
    #host    replication     all             127.0.0.1/32            trust
    #host    replication     all             ::1/128                 trust

    hostssl all keycloak 0.0.0.0/0 cert clientcert=verify-full map=keycloak

    host all all all scram-sha-256

  pg_ident.conf: |
    # MAPNAME      SYSTEM-USERNAME              PG-USERNAME
    keycloak       keycloak-internal        keycloak

  postgresql.conf: |
      ssl_ca_file = '/certs/internal-ca.pem'
      ssl_key_file = '/certs/postgres-internal-key.pem'
      ssl_cert_file = '/certs/postgres-internal.pem'
      ssl = 'on'
      hba_file = '/configs/pg_hba.conf'
      ident_file = '/configs/pg_ident.conf'
      listen_addresses = '*'
      ssl_max_protocol_version = TLSv1.2

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
spec:
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      # Since pgadmin accepts password file only if it is readable by the user that pgadmin
      # runs as, we need to make a copy of the password file and change the ownership and permissions.
      initContainers:
      - name: copy-pgpassfile
        image: alpine:3.20
        command:
        - sh
        - -c
        - |
          cp /config/pgpassfile /var/lib/pgadmin/pgpassfile
          chown 5050:5050 /var/lib/pgadmin/pgpassfile
          chmod 0400 /var/lib/pgadmin/pgpassfile
        volumeMounts:
        - name: pgadmin-config
          mountPath: /config
        - name: pgadmin-data
          mountPath: /var/lib/pgadmin
      containers:
      - name: myapp
        # https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html
        image: dpage/pgadmin4:8
        ports:
        - containerPort: 80
        env:
          - name: PGADMIN_DEFAULT_EMAIL
            value: "admin@localhost.com"
          - name: PGADMIN_DEFAULT_PASSWORD
            value: "admin"
          - name: PGADMIN_SERVER_JSON_FILE
            value: "/config/servers.json"
          - name: PGADMIN_CONFIG_SERVER_MODE
            value: "False"
          - name: PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED
            value: "False"
          - name: PGADMIN_CONFIG_WTF_CSRF_CHECK_DEFAULT
            value: "False"
          - name: PGADMIN_CONFIG_WTF_CSRF_ENABLED
            value: "False"
          - name: GUNICORN_ACCESS_LOGFILE
            value: "/dev/null"
        volumeMounts:
        - name: pgadmin-config
          mountPath: /config
        - name: pgadmin-data
          mountPath: /var/lib/pgadmin
      volumes:
      - name: pgadmin-config
        configMap:
          name: pgadmin-config
      - name: pgadmin-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
spec:
  selector:
    app: pgadmin
  ports:
  - port: 80
    targetPort: 80
---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: pgadmin
spec:
  virtualhost:
    fqdn: pgadmin.127-0-0-121.nip.io
  routes:
    - services:
        - name: pgadmin
          port: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgadmin-config
data:
  servers.json: |
    {
      "Servers": {
        "1": {
          "Name": "Keycloak",
          "Group": "Servers",
          "Username": "keycloak",
          "Host": "postgres",
          "Port": 5432,
          "MaintenanceDB": "postgres",
          "ConnectionParameters": {
            "passfile": "/var/lib/pgadmin/pgpassfile"
          }
        }
      }
    }
  pgpassfile: |
    postgres:5432:*:keycloak:keycloak
