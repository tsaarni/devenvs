#!/bin/env python3
#
# This script reads a JSON file containing EDS messages and generates a table of DiscoveryRequest
# and DiscoveryResponse messages.
#
# The JSON file is generated by https://github.com/tsaarni/grpc-json-sniffer
#
# Install dependencies
#
#    python3 -mvenv .venv
#    . .venv/bin/activate
#    pip install tabulate
#
# Run the script to generate a table of EDS messages
#
#    apps/grpc-eds-sequencer.py grpc_capture.json
#    apps/grpc-eds-sequencer.py grpc_capture.json <min_message_id>  # analyze messages with message_id >= min_message_id
#

import json
import sys
from tabulate import tabulate

class Discovery:

    def __init__(self):
        self.rows = []

    def set_min_message_id(self, min_message_id):
        self.min_message_id = int(min_message_id)

    def process(self, line):
        data = json.loads(line)
        message_id = data.get("message_id")

        if message_id < self.min_message_id:
            return

        stream_id = data.get("stream_id")
        content = data.get("content", {})

        if data.get("method") == "/envoy.service.endpoint.v3.EndpointDiscoveryService/StreamEndpoints" and data.get("message") == "envoy.service.discovery.v3.DiscoveryRequest":
            version_info = content.get("versionInfo")
            resource_name = content.get("resourceNames")[0]
            response_nonce = content.get("responseNonce")
            self.rows.append([message_id, "DiscoveryRequest", stream_id, version_info, response_nonce, resource_name])

        if data.get("method") == "/envoy.service.endpoint.v3.EndpointDiscoveryService/StreamEndpoints" and data.get("message") == "envoy.service.discovery.v3.DiscoveryResponse":
            version_info = content.get("versionInfo")
            nonce = content.get("nonce")
            resource = content.get("resources")[0]
            cluster_name = resource.get("clusterName")
            endpoint = resource.get("endpoints")[0]
            lb_endpoints = endpoint.get("lbEndpoints")
            addresses = []
            for lb_endpoint in lb_endpoints:
                endpoint = lb_endpoint.get("endpoint")
                addresses.append(endpoint.get("address").get("socketAddress").get("address"))
            self.rows.append([message_id, "DiscoveryResponse", stream_id, version_info, nonce, cluster_name, addresses])

    def print_table(self):
        headers = ["Id", "Message", "Stream ID", "Version Info", "Nonce", "Resource Name", "Addresses"]
        print(tabulate(self.rows, headers=headers, tablefmt="table"))

def main():

    min_message_id = 0
    if len(sys.argv) > 2:
        min_message_id = sys.argv[2]

    diagram = Discovery()
    diagram.set_min_message_id(min_message_id)

    with open(sys.argv[1], "r") as f:
        for line in f:
            diagram.process(line)

    diagram.print_table()


if __name__ == "__main__":
    main()
